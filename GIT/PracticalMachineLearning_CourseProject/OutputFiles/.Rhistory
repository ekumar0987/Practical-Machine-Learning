swirl()
library(swirl)
swirl()
fit<-lm(child~parent,galton)
fit<-lm(child~parent,data=galton)
head(galton)
data(glaton)
swirl()
data(galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(galton$childheight)
head(galton)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est(parent))
?est
??est
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(resid(efit))
mean(efit$residuals)
cov(efit$residuals,attenu$mag
)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor,gpa_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(child~parent,galton)
sqrt((sum(fit$residuals^2))/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mean(galton$child)^2)
)
sTot <- sum((galton$child-mu)^2)
sRes<-deviance(galton$child)
?deviance
sRes<-deviance(galton$child)/n-2
sRes<-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(fertility~.,swiss)
head(swiss)
lm(Fertility~.,swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination,Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility~.+ec,swiss)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(M[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit<-(count~spray,InsectSprays)
fit<-lm(count~spray,InsectSprays)
fit$coef
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count ~ spray - 1)
nfit<-lm(count ~ spray - 1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,spray2)
spray2
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
lm(Numeric~Year,hunger[hunger$Sex=="Female",])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<-lm(Numeric~Year+Sex)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resn
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-sqrt(deviance(fit)/fit$df)
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1<-sqrt(deviance(fitno)/fitno$df)
resid(fitno)/(sigma1 * sqrt(1-hatvalues(fitno)))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(adData)
View(testIndex)
adData1 = data.frame(predictors)
trainIndex1 = createDataPartition(diagnosis,p=0.5,list=FALSE)
training1 = adData[trainIndex1,]
testing1 = adData[-trainIndex1,]
View(adData1)
View(adData)
AlzheimerDisease
predictors
head(predictors,3)
?predictors
head(diagnosis,3)
View(trainIndex1)
View(training)
data(AlzheimerDisease
)
adData = data.frame(diagnosis,predictors)
data(AlzheimerDisease
+ )
data(AlzheimerDisease)
View(predictors)
adData = data.frame(diagnosis,predictors)
View(adData)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
View(trainIndex)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
nsv<-nearZeroVariance(training)
library("ISLR")
library(ISLR)
library(caret)
nsv<-nearZeroVariance(training)
nsv<-nearZeroVar(training)
nsv
nsv<-nearZeroVar(training, saveMetrics=TRUe)
nsv<-nearZeroVar(training, saveMetrics=TRUE)
nsv
histogram(training$Superplasticizer)
histogram(log10(training$Superplasticizer))
histogram(training$Superplasticizer)
histogram(log10(training$Superplasticizer))
histogram(log10(training$Superplasticizer)+1)
histogram(log(training$Superplasticizer)+1)
histogram(training$Superplasticizer)
histogram(log(training$Superplasticizer)+1)
testlog<-log(training$Superplasticizer)+1)
testlog<-log(training$Superplasticizer)+1
testlog
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
training_IL<-adData[,names %in% c(IL)]
training_IL<-adData[,names %in% c("IL")]
training_IL<-adData[,names %==% c("IL")]
til<-adData[ , grepl( "IL" , names( adData ) ) ]
View(til)
preprocess
?preprocess
?preProcess
pp<-preprocess(til,method="pca",thresh="0.9")
pp<-preProcess(til,method="pca",thresh="0.9")
pp
summry(pp)
summary(pp)
pp$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
t1<-train(diagnostics~.,method=glm,data=adData)
t1<-train(diagnosis~.,method=glm,data=adData)
t1<-train(diagnosis~.,method="glm",data=adData)
install.packages(e1071)
library("e1071")
install.packages("e1071")
library(e1071)
t1<-train(diagnosis~.,method="glm",data=adData)
summary(t1)
t1<-train(diagnosis~.,method="glm",data=training)
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
C1
modelFit <- train(training$diagnosis ~ .,
method="glm",
preProcess="pca",
data=training,
trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
C2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
til<- predictors[,grep("^IL", colnames(training), value=TRUE)]
View(til)
model1<-train(diagnosis~.,data=training,method="glm")
confusionMatrix(testing$diagnosis,predict(model1,testing))
c1<-confusionMatrix(testing$diagnosis,predict(model1,testing))
C1$overall[1]
c1$overall[1]
model2<-train(diagnosis~.,data=til,method="glm",preProcess="pca")
c2<-confusionMatrix(testing$diagnosis,predict(model2,testing))
c2$overall[1]
?createDataPartition
getwd()
setwd("C:/Users/Eshitha/GIT/PracticalMachineLearning_CourseProject/")
traindf<-read.csv(pml-training.csv)
traindf<-read.csv("pml-training.csv")
testdf<-read.csv("pml-testing.csv")
View(traindf)
colnames(traindf)
?read.csv
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
View(traindf)
testdf<-read.csv("pml-testing.csv", na.strings = c("","NA","#DIV/0!"))
View(testdf)
traindf<-traindf[,grepl(c("user","timestamp","window","max","min","var","avg","stddev"),names(traindf))]
traindf
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
?grepl
traindf<-traindf[,grepl(c("user"|"timestamp"|"window"|"max"|"min"|"var"|"avg"|"stddev"),names(traindf))]
pattern<-c("user","timestamp","window","max","min","var","avg","stddev")
traindf<-traindf[,grepl(paste(pattern,collapse="|"),names(traindf))]
View(traindf)
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
traindf<-traindf[,!grepl(paste(pattern,collapse="|"),names(traindf))]
testdf<-testdf[,!grepl(paste(pattern,collapse="|"),names(testdf))]
View(testdf)
View(traindf)
?nearZeroVar
nearZeroVar(traindf,saveMetrics=TRUE)
library(caret)
nearZeroVar(traindf,saveMetrics=TRUE)
?varImp
head(iris)
str(trainfdf)
str(traindf)
inTrain<-createDataPartition(y=traindf$classe,p=0.2,list=FALSE)
train_sub <- traindf[inTrain,]
View(train_sub)
train_sub<-traindf[,-c("kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt","amplitude_roll_arm")]
train_sub<-traindf[,-which(names(train_sub) %in% ("kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt","amplitude_roll_arm")]
train_sub<-traindf[,-which(names(train_sub) %in% c("kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt","amplitude_roll_arm")]
train_sub<-traindf[,-which(names(train_sub) %in% c("kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt","amplitude_roll_arm"))]
train_sub<-traindf[,-which(names(train_sub) %in% c("amplitude_pitch_arm","kurtosis_yaw_dumbbell","skewness_yaw_dumbbell"))]
train_sub<-traindf[,-which(names(train_sub) %in% c("amplitude_yaw_dumbbell","kurtosis_yaw_forearm","skewness_yaw_forearm","amplitude_yaw_forearm"))]
model_sub<-train(train_sub$classe~.,method="rf",data=train_sub)
pattern<-c("kurtosis","skewness","amplitude")
train_sub2<-traindf[,!grepl(paste(pattern,collapse="|"),names(traindf))]
model_sub2<-train(train_sub$classe~.,method="rf",data=train_sub2)
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_sub,method = "rf",trControl = fitControl)
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_sub2,method = "rf",trControl = fitControl)
?varImp
varImp(fit)
train_sub2<-traindf[,-X]
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
testdf<-read.csv("pml-testing.csv", na.strings = c("","NA","#DIV/0!"))
pattern<-c("user","timestamp","window","max","min","var","avg","stddev","amplitude","kurtosis","skewness")
traindf<-traindf[,!grepl(paste(pattern,collapse="|"),names(traindf))]
testdf<-testdf[,!grepl(paste(pattern,collapse="|"),names(testdf))]
View(traindf)
traindf<-traindf[,-which(names(train_sub) %in% c("X"))]
View(traindf)
inTrain<-createDataPartition(y=traindf$classe,p=0.2,list=FALSE)
train_subset<-traindf[inTrain,]
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_subset,method = "rf",trControl = fitControl)
varImp(fit)
varImp(fit,scale=FALSE)
rownames(varimp$importance)
v<-varImp(fit,scale=FALSE)
rownames(v$importance)
confusionMatrix(testdf$classe,predict(fit,testingdf))
confusionMatrix(testdf$classe,predict(fit,testdf))
testdfdf<-testdf[,-which(names(testdf) %in% c("X"))]
confusionMatrix(testdfdf$classe,predict(fit,testdfdf))
View(testdf)
View(testdfdf)
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
testdf<-read.csv("pml-testing.csv", na.strings = c("","NA","#DIV/0!"))
pattern<-c("user","timestamp","window","max","min","var","avg","stddev","amplitude","kurtosis","skewness")
traindf<-traindf[,!grepl(paste(pattern,collapse="|"),names(traindf))]
testdf<-testdf[,!grepl(paste(pattern,collapse="|"),names(testdf))]
traindf<-traindf[,-which(names(traindf) %in% c("X"))]
testdf<-testdf[,-which(names(testdf) %in% c("X"))]
inTrain<-createDataPartition(y=traindf$classe,p=0.5,list=FALSE)
train_subset<-traindf[inTrain,]
validation_subset<-traindf[-inTrain,]
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_sub,method = "rf",trControl = fitControl)
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_subset,method = "rf",trControl = fitControl)
confusionMatrix(validation_subset$classe,predict(fit,validation_subset))
varImp(fit,scale=FALSE)
validation_subset<-validation_subset[which(names(validation_subset) %in% c("roll_belt","pitch_forearm","yaw_belt","magnet_dumbbell_z"
,"magnet_dumbbell_y","magnet_dumbbell_y","pitch_belt","roll_forearm",
"accel_dumbbell_y","accel_forearm_x","roll_dumbbell","magnet_dumbbell_x",
"magnet_belt_z","total_accel_dumbbell","accel_dumbbell_z","magnet_forearm_z"),
"magnet_belt_y","accel_belt_z","yaw_arm","gyros_belt_z","magnet_belt_x"
)]
validation_subset<-validation_subset[which(names(validation_subset) %in% c("roll_belt","pitch_forearm","yaw_belt","magnet_dumbbell_z"
,"magnet_dumbbell_y","magnet_dumbbell_y","pitch_belt","roll_forearm",
"accel_dumbbell_y","accel_forearm_x","roll_dumbbell","magnet_dumbbell_x",
"magnet_belt_z","total_accel_dumbbell","accel_dumbbell_z","magnet_forearm_z",
"magnet_belt_y","accel_belt_z","yaw_arm","gyros_belt_z","magnet_belt_x")
)]
confusionMatrix(validation_subset$classe,predict(fit,validation_subset))
train_subset<-train_subset[which(names(validation_subset) %in% c("roll_belt","pitch_forearm","yaw_belt","magnet_dumbbell_z"
,"magnet_dumbbell_y","magnet_dumbbell_y","pitch_belt","roll_forearm",
"accel_dumbbell_y","accel_forearm_x","roll_dumbbell","magnet_dumbbell_x",
"magnet_belt_z","total_accel_dumbbell","accel_dumbbell_z","magnet_forearm_z",
"magnet_belt_y","accel_belt_z","yaw_arm","gyros_belt_z","magnet_belt_x")
)]
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_subset,method = "rf",trControl = fitControl)
##Read the data
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
testdf<-read.csv("pml-testing.csv", na.strings = c("","NA","#DIV/0!"))
##Exclude unecessary variables - user specific, time specific or aggregate information
pattern<-c("user","timestamp","window","max","min","var","avg","stddev","amplitude","kurtosis","skewness")
traindf<-traindf[,!grepl(paste(pattern,collapse="|"),names(traindf))]
testdf<-testdf[,!grepl(paste(pattern,collapse="|"),names(testdf))]
traindf<-traindf[,-which(names(traindf) %in% c("X"))]
testdf<-testdf[,-which(names(testdf) %in% c("X"))]
inTrain<-createDataPartition(y=traindf$classe,p=0.5,list=FALSE)
train_subset<-traindf[inTrain,]
validation_subset<-traindf[-inTrain,]
##train your model on a subset of data.
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_subset,method = "rf",trControl = fitControl)
fit
confusionMatrix(validation_subset$classe,predict(fit,validation_subset))
train_subset<-train_subset[which(names(validation_subset) %in% c("roll_belt","pitch_forearm","yaw_belt","magnet_dumbbell_z"
,"magnet_dumbbell_y","magnet_dumbbell_y","pitch_belt","roll_forearm",
"accel_dumbbell_y","accel_forearm_x","roll_dumbbell","magnet_dumbbell_x",
"magnet_belt_z","total_accel_dumbbell","accel_dumbbell_z","magnet_forearm_z",
"magnet_belt_y","accel_belt_z","yaw_arm","gyros_belt_z","magnet_belt_x","classe")
)]
validation_subset<-validation_subset[which(names(validation_subset) %in% c("roll_belt","pitch_forearm","yaw_belt","magnet_dumbbell_z"
,"magnet_dumbbell_y","magnet_dumbbell_y","pitch_belt","roll_forearm",
"accel_dumbbell_y","accel_forearm_x","roll_dumbbell","magnet_dumbbell_x",
"magnet_belt_z","total_accel_dumbbell","accel_dumbbell_z","magnet_forearm_z",
"magnet_belt_y","accel_belt_z","yaw_arm","gyros_belt_z","magnet_belt_x","classe")
)]
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_subset,method = "rf",trControl = fitControl)
confusionMatrix(validation_subset$classe,predict(fit,validation_subset))
predict(fit,testdf)
##Read the data
traindf<-read.csv("pml-training.csv", na.strings = c("","NA","#DIV/0!"))
testdf<-read.csv("pml-testing.csv", na.strings = c("","NA","#DIV/0!"))
##Exclude unecessary variables - user specific, time specific or aggregate information
pattern<-c("user","timestamp","window","max","min","var","avg","stddev","amplitude","kurtosis","skewness")
traindf<-traindf[,!grepl(paste(pattern,collapse="|"),names(traindf))]
testdf<-testdf[,!grepl(paste(pattern,collapse="|"),names(testdf))]
traindf<-traindf[,-which(names(traindf) %in% c("X"))]
testdf<-testdf[,-which(names(testdf) %in% c("X"))]
##Exclude variables with less variability. nearZeroVar test performed. NA caused problems. So deleted everything
##nearZeroVar(traindf,saveMetrics=TRUE)
##kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt,amplitude_roll_arm,amplitude_pitch_arm,kurtosis_yaw_dumbbell
##skewness_yaw_dumbbell,amplitude_yaw_dumbbell,kurtosis_yaw_forearm,skewness_yaw_forearm,amplitude_yaw_forearm
##train_sub<-traindf[,-which(names(train_sub) %in% c("amplitude_pitch_arm","kurtosis_yaw_dumbbell","skewness_yaw_dumbbell"))]
inTrain<-createDataPartition(y=traindf$classe,p=0.5,list=FALSE)
train_subset<-traindf[inTrain,]
validation_subset<-traindf[-inTrain,]
##train your model on a subset of data.
fitControl <- trainControl(method = "cv",number = 3,repeats = 10)
set.seed(825)
fit <- train(classe ~ ., data = train_subset,method = "rf",trControl = fitControl)
##See accuracy with all predictors
confusionMatrix(validation_subset$classe,predict(fit,validation_subset))
predict(fit,testdf)
answers<-c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
setwd("C:/Users/Eshitha/GIT/PracticalMachineLearning_CourseProject/OutputFiles/")
pml_write_files(answers)
>read.csv
?read.csv
?varImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
mod1<-train(y~.,method="rf",data=vowel.train)
mod2<-train(y~.,method="gbm",data=vowel.train)
cm1<-confusionMatrix(vowel.test$y,predict(mod1,vowel.test))
cm2<-confusionMatrix(vowel.test$y,predict(mod2,vowel.test))
cm1
cm2
set.seed(3523)
library(AppliedPredictiveModeling)
library(elasticnet)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength,
p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(233)
fit <- train(CompressiveStrength ~ ., data=training, method="lasso")
set.seed(3523)
library(AppliedPredictiveModeling)
library(elasticnet)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength,
p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(233)
fit <- train(CompressiveStrength ~ ., data=training, method="lasso")
fit
plot.enet(fit$finalModel, xvar="penalty", use.color=T)
